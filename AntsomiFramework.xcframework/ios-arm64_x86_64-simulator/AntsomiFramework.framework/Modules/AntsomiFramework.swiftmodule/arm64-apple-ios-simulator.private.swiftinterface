// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AntsomiFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AntsomiFramework
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreLocation
import Foundation
import SocketIO
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers open class AntsomiNotificationService : UserNotifications.UNNotificationServiceExtension, UserNotifications.UNUserNotificationCenterDelegate {
  open var appGroupsId: Swift.String? {
    get
  }
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AntsomiUNUserNotificationCenter : UIKit.UIResponder, UIKit.UIApplicationDelegate, UserNotifications.UNUserNotificationCenterDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) open func setActionForUrl(_ actionForUrl: @escaping (Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func onNotificationPressed(_ completion: @escaping ([Swift.String : Any]) -> ())
  @_Concurrency.MainActor(unsafe) open func setActionForDismiss(_ actionForDismiss: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func setActionForDefault(_ actionForDefault: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func setActionForCustomDefault(_ actionForCustomDefault: @escaping (Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
public protocol AppInboxDelegate : AnyObject {
  func onNewMessage(_ newMessageReceived: InboxItem)
}
@objc public class AppInbox : ObjectiveC.NSObject {
  weak public var delegate: AppInboxDelegate?
  public var lookupId: Swift.String
  public var lookupType: Swift.String
  public static var pageLimit: Swift.Int
  public static func setPageLimit(pageLimit: Swift.Int)
  public init(destinationId: Swift.String, audienceType: Swift.String, log: Swift.Bool = false)
  public func getMessage() -> [InboxItem]
  public func countUnreadMessage(completion: @escaping ((Swift.Int) -> Swift.Void))
  public func getMessageById(messageId: Swift.String, completion: @escaping ((InboxItem) -> Swift.Void))
  public func forceFetchInboxItem(catalogId: [Swift.String] = [], page: Swift.Int, completion: @escaping (([InboxItem]) -> Swift.Void))
  public func markAllAsRead()
  public func modifyMessageStatus(_ messageId: [Swift.String], action: ModifyAction)
  public func fetchAllCatalog(completion: @escaping (([Catalog]) -> Swift.Void))
  @objc deinit
}
public struct Catalog : Swift.Codable {
  public var catalogId: Swift.String
  public var catalogName: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Catalog {
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Antsomi : ObjectiveC.NSObject {
  @objc public static let SDK_VERSION: Swift.String
  @objc public var isAssociatedUTM: Swift.Bool
  @objc public static var appInbox: AppInbox!
  @objc @Atomic public var isDelivery: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  public struct Configuration {
    public let portalId: Swift.String
    public let propsId: Swift.String
    public let applicationId: Swift.String
    public let appGroupId: Swift.String
    public init(portalId: Swift.String, propsId: Swift.String, appGroupId: Swift.String, applicationId: Swift.String)
  }
  @objc public var debug: Swift.Bool
  @objc public var logger: ((Swift.String) -> Swift.Void)?
  @objc public func log(_ str: Swift.String)
  @objc public static var shared: Antsomi
  @objc public func setCustomerProperties(customerId: Swift.String, customerProperties: [Swift.String : Any] = [:])
  @objc public func setIsDelivery(newValue: Swift.Bool)
  @objc public func resetCustomer()
  @objc public func getCustomerId() -> Swift.String
  @objc public func getPropsId() -> Swift.String
  @objc public func getCustomerProperties() -> [Swift.String : Any]?
  @objc public func getDeviceId() -> Swift.String
  @objc public func getPortalId() -> Swift.String?
  @objc public func appInboxInit(destinationId: Swift.String, audienceType: Swift.String)
  public func track(event: CDPEvent)
  @objc public func handleDeeplinkURL(_ url: Foundation.URL)
  public func activate(with config: Antsomi.Configuration)
  @objc public func getUid() -> Swift.String?
  @objc public func trackAppLaunch()
  @objc public func registerForNotification(_ deviceToken: Foundation.Data)
  @objc public func trackScreen(name: Swift.String, title: Swift.String = "", type: Swift.String = "")
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserDefaultsManager : ObjectiveC.NSObject {
  public static var userDefaults: Foundation.UserDefaults?
  @objc override dynamic public init()
  @objc deinit
}
public enum ModifyAction : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case read
  case unread
  case remove
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ModifyAction]
  public typealias RawValue = Swift.Int
  public static var allCases: [ModifyAction] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Context : ObjectiveC.NSObject {
  public var deviceID: Swift.String?
  public func execute() -> [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@propertyWrapper public class Atomic<T> {
  public init(wrappedValue value: T)
  public var wrappedValue: T {
    get
    set
  }
  @objc deinit
}
public struct CDPEvent : Swift.Encodable {
  public mutating func setEventName(eventName: Swift.String)
  public mutating func setObjectProperties(objectProperties: [Swift.String : Any])
  public mutating func setEventProperties(eventProperties: [Swift.String : Any])
  public mutating func setItems(items: [[Swift.String : Any]])
  public mutating func setScreenType(type: Swift.String)
  public mutating func setCustomerProperties(customerProperties: [Swift.String : Any])
  public mutating func setUserPropperties(userPropperties: [Swift.String : Any])
  public mutating func setScreenName(screenName: Swift.String)
  public init(en: Swift.String = "", items: [[Swift.String : Any]] = [], userProps: [Swift.String : Any] = [:], customerProps: [Swift.String : Any] = [:], objectProps: [Swift.String : Any] = [:], evetProps: [Swift.String : Any] = [:], screenType: Swift.String = "", screenLabel: Swift.String = "", screenName: Swift.String = "")
  public func encode(to encoder: Swift.Encoder) throws
}
public struct InboxItem : Swift.Codable {
  public var itemId: Swift.String
  public var lastUpdated: Swift.String
  public var heading: Swift.String
  public var dateCreated: Swift.String
  public var catalogId: [Swift.String]
  public var lauchUrl: Foundation.URL?
  public var lookupType: Swift.String
  public var templateId: Swift.String
  public var content: Swift.String
  public var appUrl: Foundation.URL?
  public var status: Swift.Int
  public var imageUrl: Foundation.URL?
  public var buttonAppUrl1: Foundation.URL?
  public var buttonAppUrl2: Foundation.URL?
  public var buttonLaunchUrl1: Foundation.URL?
  public var buttonLaunchUrl2: Foundation.URL?
  public var buttonLabel1: Swift.String?
  public var buttonLabel2: Swift.String?
  public var trackingUrl: Foundation.URL?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension InboxItem {
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
extension ModifyAction : Swift.Equatable {}
extension ModifyAction : Swift.Hashable {}
extension ModifyAction : Swift.RawRepresentable {}
